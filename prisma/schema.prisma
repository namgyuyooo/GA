// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // "SUPER_ADMIN", "ADMIN" or "USER"
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model UtmCampaign {
  id          String   @id @default(cuid())
  name        String
  source      String
  medium      String
  campaign    String
  term        String?
  content     String?
  url         String
  description String?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([campaign, source, medium])
}

model WeeklyReport {
  id                String   @id @default(cuid())
  title            String
  startDate        DateTime
  endDate          DateTime
  totalSessions    Int
  totalUsers       Int
  totalConversions Int
  avgEngagementRate Float
  totalClicks      Int
  totalImpressions Int
  avgCtr           Float
  avgPosition      Float
  reportData       Json     // JSON for PostgreSQL
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ScheduledJob {
  id          String   @id @default(cuid())
  name        String
  type        String   // JobType as string
  schedule    String   // Cron expression
  isActive    Boolean  @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  config      Json?    // JSON for PostgreSQL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WeeklyReportSchedule {
  id              String   @id @default(cuid())
  name            String   @default("주간 보고서")
  isActive        Boolean  @default(true)
  dayOfWeek       Int      @default(1) // 0=일요일, 1=월요일, ..., 6=토요일
  hour            Int      @default(10)
  minute          Int      @default(30)
  timezone        String   @default("Asia/Seoul")
  recipients      Json?    // JSON array of email addresses
  includeSummary  Boolean  @default(true)
  includeIssues   Boolean  @default(true)
  includeAI       Boolean  @default(true)
  aiPrompt        String?  // Custom prompt for Gemini
  propertyIds     Json?    // JSON array of property IDs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Setting {
  key   String @id
  value String
}

model KeywordCohortGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  keywords    Json     // JSON array for PostgreSQL
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([name])
}

model UtmCohortGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#10B981")
  campaigns   Json     // JSON array for PostgreSQL
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([name])
}

model KeywordCohortData {
  id               String   @id @default(cuid())
  cohortDate       DateTime
  keyword          String
  impressions      Int      @default(0)
  clicks           Int      @default(0)
  ctr              Float    @default(0)
  position         Float    @default(0)
  initialUsers     Int      @default(0)
  retentionWeek1   Int      @default(0)
  retentionWeek2   Int      @default(0)
  retentionWeek4   Int      @default(0)
  retentionWeek8   Int      @default(0)
  conversions      Int      @default(0)
  revenue          Float    @default(0)
  groupId          String?
  propertyId       String
  dataSource       String   @default("GSC") // GSC (Google Search Console) or GA4
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([cohortDate, keyword, propertyId])
  @@index([propertyId, cohortDate])
  @@index([keyword])
}

model DataUpdateLog {
  id           String   @id @default(cuid())
  dataType     String   // 'keyword_cohort', 'analytics', etc.
  propertyId   String?
  status       String   // 'SUCCESS', 'FAILED', 'RUNNING'
  recordsCount Int      @default(0)
  errorMessage String?
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  triggeredBy  String   @default("SCHEDULED") // 'SCHEDULED', 'MANUAL'
  
  @@index([dataType, propertyId])
}

model ConversionGoal {
  id                String   @id @default(cuid())
  name              String
  description       String?
  goalType          String   // 'EVENT', 'PAGE_VIEW', 'DURATION', 'REVENUE'
  eventName         String?  // GA4 이벤트명 (goalType이 EVENT인 경우)
  pagePath          String?  // 페이지 경로 (goalType이 PAGE_VIEW인 경우)
  revenueThreshold  Float?   // 수익 임계값 (goalType이 REVENUE인 경우)
  durationSeconds   Int?     // 체류 시간 임계값 (goalType이 DURATION인 경우)
  isActive          Boolean  @default(true)
  priority          Int      @default(1) // 1=높음, 2=중간, 3=낮음
  propertyId        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([name, propertyId])
  @@index([propertyId, isActive])
}

model GTMGoal {
  id          String   @id @default(cuid())
  accountId   String
  containerId String
  tagId       String
  name        String
  type        String
  isActive    Boolean  @default(true)
  priority    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([accountId, containerId, tagId])
  @@index([accountId, containerId])
}

model Insight {
  id              String   @id @default(cuid())
  type            String   // dashboard, traffic, utm-cohort, keyword-cohort, comprehensive 등
  propertyId      String
  model           String
  prompt          String
  result          String
  dataSourceTypes Json?    // JSON: 사용된 데이터 소스 타입들 ["ga4", "gsc", "gtm"]
  analysisStartDate DateTime? // 분석 대상 데이터의 시작일
  analysisEndDate   DateTime? // 분석 대상 데이터의 종료일
  sourceInsightIds  Json?    // JSON: 종합 인사이트인 경우 참조한 개별 인사이트 ID들
  isComprehensive   Boolean  @default(false) // 종합 인사이트 여부
  weeklyTrend       Json?    // JSON: 4주간 주간 변화율 데이터
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([type, propertyId, createdAt])
  @@index([isComprehensive, createdAt])
}

// 캐시된 GA4 데이터
model CachedAnalyticsData {
  id               String   @id @default(cuid())
  propertyId       String
  dataType         String   // 'overview', 'users', 'sessions', 'pageviews', 'conversions', 'traffic'
  period           String   // '7daysAgo', '30daysAgo' 등
  data             Json     // 실제 GA4 API 응답 데이터
  lastUpdated      DateTime @default(now())
  expiresAt        DateTime // 캐시 만료 시간
  updateFrequency  Int      @default(3600) // 업데이트 주기 (초)
  
  @@unique([propertyId, dataType, period])
  @@index([expiresAt])
  @@index([propertyId, dataType])
}

// 캐시된 GSC 데이터
model CachedSearchData {
  id               String   @id @default(cuid())
  siteUrl          String   // GSC 사이트 URL
  dataType         String   // 'query', 'page', 'country', 'device'
  period           String   // 시작일-종료일 형태
  data             Json     // 실제 GSC API 응답 데이터
  lastUpdated      DateTime @default(now())
  expiresAt        DateTime
  updateFrequency  Int      @default(86400) // 1일 기본값
  
  @@unique([siteUrl, dataType, period])
  @@index([expiresAt])
  @@index([siteUrl, dataType])
}

// 캐시된 GTM 데이터
model CachedGTMData {
  id               String   @id @default(cuid())
  accountId        String
  containerId      String
  dataType         String   // 'tags', 'triggers', 'variables', 'versions'
  data             Json     // GTM API 응답 데이터
  lastUpdated      DateTime @default(now())
  expiresAt        DateTime
  updateFrequency  Int      @default(43200) // 12시간 기본값
  
  @@unique([accountId, containerId, dataType])
  @@index([expiresAt])
  @@index([accountId, containerId])
}

// 주간 변화율 데이터
model WeeklyTrendData {
  id               String   @id @default(cuid())
  propertyId       String
  dataType         String   // 'users', 'sessions', 'pageviews', 'conversions'
  week1            Json     // 가장 최근 주 데이터
  week2            Json     // 1주 전 데이터
  week3            Json     // 2주 전 데이터
  week4            Json     // 3주 전 데이터
  changeRates      Json     // 주차별 변화율 계산 결과
  calculatedAt     DateTime @default(now())
  
  @@unique([propertyId, dataType])
  @@index([propertyId, calculatedAt])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  name        String   // 프롬프트 이름 (예: "주간보고서", "트래픽분석", "UTM코호트" 등)
  type        String   // 프롬프트 유형 (weekly-report, monthly-report, traffic-insight, utm-cohort-insight, keyword-cohort-insight 등)
  description String?  // 프롬프트 설명
  prompt      String   // 실제 프롬프트 템플릿
  variables   Json?    // 사용 가능한 변수 목록 (JSON)
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false) // 기본 프롬프트 여부
  sortOrder   Int      @default(0)     // 정렬 순서
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([name, type])
  @@index([type, isActive])
}

model UnifiedEventSequence {
  id          String   @id @default(cuid())
  sessionId   String
  userId      String?
  propertyId  String
  timestamp   DateTime
  eventType   String   // e.g., 'page_view', 'click', 'conversion', 'search_inflow'
  eventData   Json     // Flexible data structure for event details
  createdAt   DateTime @default(now())

  @@unique([sessionId, propertyId, timestamp])
  @@index([propertyId, timestamp])
  @@index([userId])
  @@index([eventType])
}

model Competitor {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  description String?
  industry    String?
  keywords    Json     // JSON array of keywords to monitor
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([domain])
  @@index([isActive])
}

model UserBehaviorPattern {
  id                String   @id @default(cuid())
  propertyId        String
  patternDate       DateTime @default(now())
  
  // 패턴 분류
  patternType       String   // 'GOAL_CONVERSION', 'HIGH_INTEREST', 'EXPLORATORY', 'BOUNCE'
  segmentName       String   // 패턴 세그먼트명
  
  // 진입 패턴
  entryPatterns     Json     // JSON: 진입 소스/키워드 패턴
  entryPagePatterns Json     // JSON: 진입 페이지 패턴
  
  // 여정 패턴
  journeyPatterns   Json     // JSON: 페이지 전환 패턴
  durationPatterns  Json     // JSON: 체류시간 패턴
  scrollPatterns    Json     // JSON: 스크롤 패턴
  
  // 전환 패턴
  conversionPatterns Json    // JSON: 전환 경로 패턴
  dropoffPatterns   Json     // JSON: 이탈 지점 패턴
  
  // 통계
  sessionCount      Int      @default(0) // 해당 패턴의 세션 수
  conversionRate    Float    @default(0) // 전환율
  avgInterestScore  Float    @default(0) // 평균 관심도 점수
  avgDuration       Int      @default(0) // 평균 체류시간
  
  // 인사이트
  insights          Json?    // JSON: 패턴별 인사이트
  recommendations   Json?    // JSON: 개선 권장사항
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([propertyId, patternDate])
  @@index([patternType])
  @@index([segmentName])
}
